{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { getNestedValue } from './../utils';\nimport { NumericTextBox } from '@progress/kendo-react-inputs';\nimport { DatePicker } from '@progress/kendo-react-dateinputs';\nimport { guid, classNames } from '@progress/kendo-react-common';\nimport { useTableKeyboardNavigation } from '@progress/kendo-react-data-tools';\nimport { GRID_COL_INDEX_ATTRIBUTE } from '../constants';\n/**\n * @hidden\n */\n\nexport var GridEditCell = function (props) {\n  var _a, _b, _c, _d, _e;\n\n  var data = getNestedValue(props.field, props.dataItem);\n  var defaultRendering = null;\n  var editCellClasses = classNames('k-grid-edit-cell', (_a = {}, _a['k-state-selected'] = props.isSelected, _a), props.className);\n  var inputId = React.useMemo(function () {\n    return guid();\n  }, []);\n  var navigationAttributes = useTableKeyboardNavigation(props.id);\n  var handleOnChange = React.useCallback(function (syntheticEvent) {\n    if (props.onChange) {\n      var value = syntheticEvent.target.type === 'checkbox' ? syntheticEvent.target.checked : syntheticEvent.target.value;\n      props.onChange({\n        dataItem: props.dataItem,\n        dataIndex: props.dataIndex,\n        field: props.field,\n        syntheticEvent: syntheticEvent,\n        value: value\n      });\n    }\n  }, [props.onChange, props.dataItem, props.dataIndex, props.field]);\n  var inputChange = React.useCallback(function (e) {\n    if (props.onChange) {\n      props.onChange({\n        dataItem: props.dataItem,\n        dataIndex: props.dataIndex,\n        field: props.field,\n        syntheticEvent: e.syntheticEvent,\n        value: e.value\n      });\n    }\n  }, [props.onChange, props.dataItem, props.dataIndex, props.field]);\n\n  switch (props.editor) {\n    case 'numeric':\n      defaultRendering = React.createElement(\"td\", __assign({\n        colSpan: props.colSpan,\n        style: props.style,\n        className: editCellClasses,\n        \"aria-colindex\": props.ariaColumnIndex,\n        \"aria-selected\": props.isSelected\n      }, (_b = {}, _b[GRID_COL_INDEX_ATTRIBUTE] = props.columnIndex, _b), {\n        role: 'gridcell'\n      }, navigationAttributes), React.createElement(NumericTextBox, {\n        width: \"100%\",\n        value: data === undefined ? null : data,\n        onChange: inputChange\n      }));\n      break;\n\n    case 'date':\n      defaultRendering = React.createElement(\"td\", __assign({\n        colSpan: props.colSpan,\n        style: props.style,\n        className: editCellClasses,\n        \"aria-colindex\": props.ariaColumnIndex,\n        \"aria-selected\": props.isSelected\n      }, (_c = {}, _c[GRID_COL_INDEX_ATTRIBUTE] = props.columnIndex, _c), {\n        role: 'gridcell'\n      }, navigationAttributes), React.createElement(DatePicker, {\n        width: \"100%\",\n        value: data,\n        onChange: inputChange\n      }));\n      break;\n\n    case 'boolean':\n      defaultRendering = React.createElement(\"td\", __assign({\n        colSpan: props.colSpan,\n        style: props.style,\n        className: editCellClasses,\n        \"aria-colindex\": props.ariaColumnIndex,\n        \"aria-selected\": props.isSelected\n      }, (_d = {}, _d[GRID_COL_INDEX_ATTRIBUTE] = props.columnIndex, _d), {\n        role: 'gridcell'\n      }, navigationAttributes), React.createElement(\"input\", {\n        checked: data || false,\n        id: inputId,\n        type: \"checkbox\",\n        className: \"k-checkbox\",\n        onChange: handleOnChange\n      }), React.createElement(\"label\", {\n        className: \"k-checkbox-label\",\n        htmlFor: inputId\n      }));\n      break;\n\n    default:\n      defaultRendering = React.createElement(\"td\", __assign({\n        colSpan: props.colSpan,\n        style: props.style,\n        className: editCellClasses,\n        \"aria-colindex\": props.ariaColumnIndex,\n        \"aria-selected\": props.isSelected\n      }, (_e = {}, _e[GRID_COL_INDEX_ATTRIBUTE] = props.columnIndex, _e), {\n        role: 'gridcell'\n      }, navigationAttributes), React.createElement(\"input\", {\n        style: {\n          width: '100%'\n        },\n        className: \"k-textbox\",\n        value: data || '',\n        onChange: handleOnChange\n      }));\n  }\n\n  return props.render ? props.render.call(undefined, defaultRendering, props) : defaultRendering;\n};","map":{"version":3,"sources":["../../../src/cells/GridEditCell.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { getNestedValue } from './../utils';\nimport { NumericTextBox } from '@progress/kendo-react-inputs';\nimport { DatePicker } from '@progress/kendo-react-dateinputs';\nimport { guid, classNames } from '@progress/kendo-react-common';\nimport { useTableKeyboardNavigation } from '@progress/kendo-react-data-tools';\nimport { GRID_COL_INDEX_ATTRIBUTE } from '../constants';\n/**\n * @hidden\n */\nexport var GridEditCell = function (props) {\n    var _a, _b, _c, _d, _e;\n    var data = getNestedValue(props.field, props.dataItem);\n    var defaultRendering = null;\n    var editCellClasses = classNames('k-grid-edit-cell', (_a = {},\n        _a['k-state-selected'] = props.isSelected,\n        _a), props.className);\n    var inputId = React.useMemo(function () { return guid(); }, []);\n    var navigationAttributes = useTableKeyboardNavigation(props.id);\n    var handleOnChange = React.useCallback(function (syntheticEvent) {\n        if (props.onChange) {\n            var value = syntheticEvent.target.type === 'checkbox' ?\n                syntheticEvent.target.checked :\n                syntheticEvent.target.value;\n            props.onChange({\n                dataItem: props.dataItem,\n                dataIndex: props.dataIndex,\n                field: props.field,\n                syntheticEvent: syntheticEvent,\n                value: value\n            });\n        }\n    }, [props.onChange, props.dataItem, props.dataIndex, props.field]);\n    var inputChange = React.useCallback(function (e) {\n        if (props.onChange) {\n            props.onChange({\n                dataItem: props.dataItem,\n                dataIndex: props.dataIndex,\n                field: props.field,\n                syntheticEvent: e.syntheticEvent,\n                value: e.value\n            });\n        }\n    }, [props.onChange, props.dataItem, props.dataIndex, props.field]);\n    switch (props.editor) {\n        case 'numeric':\n            defaultRendering = (React.createElement(\"td\", __assign({ colSpan: props.colSpan, style: props.style, className: editCellClasses, \"aria-colindex\": props.ariaColumnIndex, \"aria-selected\": props.isSelected }, (_b = {}, _b[GRID_COL_INDEX_ATTRIBUTE] = props.columnIndex, _b), { role: 'gridcell' }, navigationAttributes),\n                React.createElement(NumericTextBox, { width: \"100%\", value: (data === undefined) ? null : data, onChange: inputChange })));\n            break;\n        case 'date':\n            defaultRendering = (React.createElement(\"td\", __assign({ colSpan: props.colSpan, style: props.style, className: editCellClasses, \"aria-colindex\": props.ariaColumnIndex, \"aria-selected\": props.isSelected }, (_c = {}, _c[GRID_COL_INDEX_ATTRIBUTE] = props.columnIndex, _c), { role: 'gridcell' }, navigationAttributes),\n                React.createElement(DatePicker, { width: \"100%\", value: data, onChange: inputChange })));\n            break;\n        case 'boolean':\n            defaultRendering = (React.createElement(\"td\", __assign({ colSpan: props.colSpan, style: props.style, className: editCellClasses, \"aria-colindex\": props.ariaColumnIndex, \"aria-selected\": props.isSelected }, (_d = {}, _d[GRID_COL_INDEX_ATTRIBUTE] = props.columnIndex, _d), { role: 'gridcell' }, navigationAttributes),\n                React.createElement(\"input\", { checked: data || false, id: inputId, type: \"checkbox\", className: \"k-checkbox\", onChange: handleOnChange }),\n                React.createElement(\"label\", { className: \"k-checkbox-label\", htmlFor: inputId })));\n            break;\n        default:\n            defaultRendering = (React.createElement(\"td\", __assign({ colSpan: props.colSpan, style: props.style, className: editCellClasses, \"aria-colindex\": props.ariaColumnIndex, \"aria-selected\": props.isSelected }, (_e = {}, _e[GRID_COL_INDEX_ATTRIBUTE] = props.columnIndex, _e), { role: 'gridcell' }, navigationAttributes),\n                React.createElement(\"input\", { style: { width: '100%' }, className: \"k-textbox\", value: data || '', onChange: handleOnChange })));\n    }\n    return props.render ?\n        props.render.call(undefined, defaultRendering, props) :\n        defaultRendering;\n};\n//# sourceMappingURL=GridEditCell.js.map"]},"metadata":{},"sourceType":"module"}