{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { getNestedValue } from './../utils';\nimport { guid } from '@progress/kendo-react-common';\nimport { useTableKeyboardNavigation } from '@progress/kendo-react-data-tools';\n/**\n * @hidden\n */\n\nexport var GridSelectionCell = function (props) {\n  var handleOnChange = React.useCallback(function (syntheticEvent) {\n    if (props.selectionChange) {\n      props.selectionChange({\n        syntheticEvent: syntheticEvent\n      });\n    }\n  }, [props.selectionChange]);\n  var inputId = React.useMemo(function () {\n    return guid();\n  }, []);\n  var selectedValue = getNestedValue(props.field, props.dataItem);\n  var navigationAttributes = useTableKeyboardNavigation(props.id);\n  var defaultRendering = props.rowType !== 'groupHeader' ? React.createElement(\"td\", __assign({\n    colSpan: props.colSpan,\n    style: props.style,\n    className: props.className,\n    \"aria-colindex\": props.ariaColumnIndex,\n    role: 'gridcell'\n  }, navigationAttributes), React.createElement(\"input\", {\n    checked: typeof selectedValue === 'boolean' && selectedValue,\n    id: inputId,\n    type: \"checkbox\",\n    className: \"k-checkbox\",\n    onChange: handleOnChange\n  }), React.createElement(\"label\", {\n    className: \"k-checkbox-label\",\n    htmlFor: inputId\n  })) : null;\n  return props.render ? props.render.call(undefined, defaultRendering, props) : defaultRendering;\n};","map":{"version":3,"sources":["../../../src/cells/GridSelectionCell.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,SAAS,cAAT,QAA+B,YAA/B;AACA,SAAS,IAAT,QAAqB,8BAArB;AAEA,SAAS,0BAAT,QAA2C,kCAA3C;AAEA;;AAEG;;AACH,OAAO,IAAM,iBAAiB,GAAG,UAAC,KAAD,EAAqB;AAClD,MAAM,cAAc,GAAG,KAAK,CAAC,WAAN,CACnB,UAAC,cAAD,EAAuD;AACnD,QAAI,KAAK,CAAC,eAAV,EAA2B;AACvB,MAAA,KAAK,CAAC,eAAN,CAAsB;AAAE,QAAA,cAAc,EAAA;AAAhB,OAAtB;AACH;AACJ,GALkB,EAMnB,CAAC,KAAK,CAAC,eAAP,CANmB,CAAvB;AAQA,MAAM,OAAO,GAAW,KAAK,CAAC,OAAN,CAAc,YAAA;AAAM,WAAA,IAAA,EAAA;AAAM,GAA1B,EAA4B,EAA5B,CAAxB;AACA,MAAM,aAAa,GAAG,cAAc,CAAC,KAAK,CAAC,KAAP,EAAc,KAAK,CAAC,QAApB,CAApC;AACA,MAAM,oBAAoB,GAAG,0BAA0B,CAAC,KAAK,CAAC,EAAP,CAAvD;AAEA,MAAM,gBAAgB,GAAG,KAAK,CAAC,OAAN,KAAkB,aAAlB,GACvB,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,IAAA,OAAO,EAAE,KAAK,CAAC,OADjB;AAEE,IAAA,KAAK,EAAE,KAAK,CAAC,KAFf;AAGE,IAAA,SAAS,EAAE,KAAK,CAAC,SAHnB;AAG4B,qBACX,KAAK,CAAC,eAJvB;AAKE,IAAA,IAAI,EAAE;AALR,GAAA,EAMM,oBANN,CAAA,EAQE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AACE,IAAA,OAAO,EAAE,OAAO,aAAP,KAAyB,SAAzB,IAAsC,aADjD;AAEE,IAAA,EAAE,EAAE,OAFN;AAGE,IAAA,IAAI,EAAC,UAHP;AAIE,IAAA,SAAS,EAAC,YAJZ;AAKE,IAAA,QAAQ,EAAE;AALZ,GAAA,CARF,EAeE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AAAO,IAAA,SAAS,EAAC,kBAAjB;AAAoC,IAAA,OAAO,EAAE;AAA7C,GAAA,CAfF,CADuB,GAkBrB,IAlBJ;AAoBA,SAAO,KAAK,CAAC,MAAN,GACH,KAAK,CAAC,MAAN,CAAa,IAAb,CAAkB,SAAlB,EAA6B,gBAA7B,EAA+C,KAA/C,CADG,GAEH,gBAFJ;AAGH,CApCM","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { getNestedValue } from './../utils';\nimport { guid } from '@progress/kendo-react-common';\nimport { useTableKeyboardNavigation } from '@progress/kendo-react-data-tools';\n/**\n * @hidden\n */\nexport var GridSelectionCell = function (props) {\n    var handleOnChange = React.useCallback(function (syntheticEvent) {\n        if (props.selectionChange) {\n            props.selectionChange({ syntheticEvent: syntheticEvent });\n        }\n    }, [props.selectionChange]);\n    var inputId = React.useMemo(function () { return guid(); }, []);\n    var selectedValue = getNestedValue(props.field, props.dataItem);\n    var navigationAttributes = useTableKeyboardNavigation(props.id);\n    var defaultRendering = props.rowType !== 'groupHeader' ? (React.createElement(\"td\", __assign({ colSpan: props.colSpan, style: props.style, className: props.className, \"aria-colindex\": props.ariaColumnIndex, role: 'gridcell' }, navigationAttributes),\n        React.createElement(\"input\", { checked: typeof selectedValue === 'boolean' && selectedValue, id: inputId, type: \"checkbox\", className: \"k-checkbox\", onChange: handleOnChange }),\n        React.createElement(\"label\", { className: \"k-checkbox-label\", htmlFor: inputId }))) : null;\n    return props.render ?\n        props.render.call(undefined, defaultRendering, props) :\n        defaultRendering;\n};\n//# sourceMappingURL=GridSelectionCell.js.map"]},"metadata":{},"sourceType":"module"}