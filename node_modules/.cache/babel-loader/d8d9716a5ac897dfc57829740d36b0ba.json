{"ast":null,"code":"'use strict';\n/* eslint indent: 4 */\n// Private helper class\n\nclass SubRange {\n  constructor(low, high) {\n    this.low = low;\n    this.high = high;\n    this.length = 1 + high - low;\n  }\n\n  overlaps(range) {\n    return !(this.high < range.low || this.low > range.high);\n  }\n\n  touches(range) {\n    return !(this.high + 1 < range.low || this.low - 1 > range.high);\n  } // Returns inclusive combination of SubRanges as a SubRange.\n\n\n  add(range) {\n    return new SubRange(Math.min(this.low, range.low), Math.max(this.high, range.high));\n  } // Returns subtraction of SubRanges as an array of SubRanges.\n  // (There's a case where subtraction divides it in 2)\n\n\n  subtract(range) {\n    if (range.low <= this.low && range.high >= this.high) {\n      return [];\n    } else if (range.low > this.low && range.high < this.high) {\n      return [new SubRange(this.low, range.low - 1), new SubRange(range.high + 1, this.high)];\n    } else if (range.low <= this.low) {\n      return [new SubRange(range.high + 1, this.high)];\n    } else {\n      return [new SubRange(this.low, range.low - 1)];\n    }\n  }\n\n  toString() {\n    return this.low == this.high ? this.low.toString() : this.low + '-' + this.high;\n  }\n\n}\n\nclass DRange {\n  constructor(a, b) {\n    this.ranges = [];\n    this.length = 0;\n    if (a != null) this.add(a, b);\n  }\n\n  _update_length() {\n    this.length = this.ranges.reduce((previous, range) => {\n      return previous + range.length;\n    }, 0);\n  }\n\n  add(a, b) {\n    var _add = subrange => {\n      var i = 0;\n\n      while (i < this.ranges.length && !subrange.touches(this.ranges[i])) {\n        i++;\n      }\n\n      var newRanges = this.ranges.slice(0, i);\n\n      while (i < this.ranges.length && subrange.touches(this.ranges[i])) {\n        subrange = subrange.add(this.ranges[i]);\n        i++;\n      }\n\n      newRanges.push(subrange);\n      this.ranges = newRanges.concat(this.ranges.slice(i));\n\n      this._update_length();\n    };\n\n    if (a instanceof DRange) {\n      a.ranges.forEach(_add);\n    } else {\n      if (b == null) b = a;\n\n      _add(new SubRange(a, b));\n    }\n\n    return this;\n  }\n\n  subtract(a, b) {\n    var _subtract = subrange => {\n      var i = 0;\n\n      while (i < this.ranges.length && !subrange.overlaps(this.ranges[i])) {\n        i++;\n      }\n\n      var newRanges = this.ranges.slice(0, i);\n\n      while (i < this.ranges.length && subrange.overlaps(this.ranges[i])) {\n        newRanges = newRanges.concat(this.ranges[i].subtract(subrange));\n        i++;\n      }\n\n      this.ranges = newRanges.concat(this.ranges.slice(i));\n\n      this._update_length();\n    };\n\n    if (a instanceof DRange) {\n      a.ranges.forEach(_subtract);\n    } else {\n      if (b == null) b = a;\n\n      _subtract(new SubRange(a, b));\n    }\n\n    return this;\n  }\n\n  intersect(a, b) {\n    var newRanges = [];\n\n    var _intersect = subrange => {\n      var i = 0;\n\n      while (i < this.ranges.length && !subrange.overlaps(this.ranges[i])) {\n        i++;\n      }\n\n      while (i < this.ranges.length && subrange.overlaps(this.ranges[i])) {\n        var low = Math.max(this.ranges[i].low, subrange.low);\n        var high = Math.min(this.ranges[i].high, subrange.high);\n        newRanges.push(new SubRange(low, high));\n        i++;\n      }\n    };\n\n    if (a instanceof DRange) {\n      a.ranges.forEach(_intersect);\n    } else {\n      if (b == null) b = a;\n\n      _intersect(new SubRange(a, b));\n    }\n\n    this.ranges = newRanges;\n\n    this._update_length();\n\n    return this;\n  }\n\n  index(index) {\n    var i = 0;\n\n    while (i < this.ranges.length && this.ranges[i].length <= index) {\n      index -= this.ranges[i].length;\n      i++;\n    }\n\n    return this.ranges[i].low + index;\n  }\n\n  toString() {\n    return '[ ' + this.ranges.join(', ') + ' ]';\n  }\n\n  clone() {\n    return new DRange(this);\n  }\n\n  numbers() {\n    return this.ranges.reduce((result, subrange) => {\n      var i = subrange.low;\n\n      while (i <= subrange.high) {\n        result.push(i);\n        i++;\n      }\n\n      return result;\n    }, []);\n  }\n\n  subranges() {\n    return this.ranges.map(subrange => ({\n      low: subrange.low,\n      high: subrange.high,\n      length: 1 + subrange.high - subrange.low\n    }));\n  }\n\n}\n\nmodule.exports = DRange;","map":{"version":3,"sources":["D:/Castro/Development/SalesReport/SalesReport/node_modules/drange/lib/index.js"],"names":["SubRange","constructor","low","high","length","overlaps","range","touches","add","Math","min","max","subtract","toString","DRange","a","b","ranges","_update_length","reduce","previous","_add","subrange","i","newRanges","slice","push","concat","forEach","_subtract","intersect","_intersect","index","join","clone","numbers","result","subranges","map","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/* eslint indent: 4 */\n\n\n// Private helper class\nclass SubRange {\n    constructor(low, high) {\n        this.low = low;\n        this.high = high;\n        this.length = 1 + high - low;\n    }\n\n    overlaps(range) {\n        return !(this.high < range.low || this.low > range.high);\n    }\n\n    touches(range) {\n        return !(this.high + 1 < range.low || this.low - 1 > range.high);\n    }\n\n    // Returns inclusive combination of SubRanges as a SubRange.\n    add(range) {\n        return new SubRange(\n            Math.min(this.low, range.low),\n            Math.max(this.high, range.high)\n        );\n    }\n\n    // Returns subtraction of SubRanges as an array of SubRanges.\n    // (There's a case where subtraction divides it in 2)\n    subtract(range) {\n        if (range.low <= this.low && range.high >= this.high) {\n            return [];\n        } else if (range.low > this.low && range.high < this.high) {\n            return [\n                new SubRange(this.low, range.low - 1),\n                new SubRange(range.high + 1, this.high)\n            ];\n        } else if (range.low <= this.low) {\n            return [new SubRange(range.high + 1, this.high)];\n        } else {\n            return [new SubRange(this.low, range.low - 1)];\n        }\n    }\n\n    toString() {\n        return this.low == this.high ?\n            this.low.toString() : this.low + '-' + this.high;\n    }\n}\n\n\nclass DRange {\n    constructor(a, b) {\n        this.ranges = [];\n        this.length = 0;\n        if (a != null) this.add(a, b);\n    }\n\n    _update_length() {\n        this.length = this.ranges.reduce((previous, range) => {\n            return previous + range.length;\n        }, 0);\n    }\n\n    add(a, b) {\n        var _add = (subrange) => {\n            var i = 0;\n            while (i < this.ranges.length && !subrange.touches(this.ranges[i])) {\n                i++;\n            }\n            var newRanges = this.ranges.slice(0, i);\n            while (i < this.ranges.length && subrange.touches(this.ranges[i])) {\n                subrange = subrange.add(this.ranges[i]);\n                i++;\n            }\n            newRanges.push(subrange);\n            this.ranges = newRanges.concat(this.ranges.slice(i));\n            this._update_length();\n        }\n\n        if (a instanceof DRange) {\n            a.ranges.forEach(_add);\n        } else {\n            if (b == null) b = a;\n            _add(new SubRange(a, b));\n        }\n        return this;\n    }\n\n    subtract(a, b) {\n        var _subtract = (subrange) => {\n            var i = 0;\n            while (i < this.ranges.length && !subrange.overlaps(this.ranges[i])) {\n                i++;\n            }\n            var newRanges = this.ranges.slice(0, i);\n            while (i < this.ranges.length && subrange.overlaps(this.ranges[i])) {\n                newRanges = newRanges.concat(this.ranges[i].subtract(subrange));\n                i++;\n            }\n            this.ranges = newRanges.concat(this.ranges.slice(i));\n            this._update_length();\n        };\n\n        if (a instanceof DRange) {\n            a.ranges.forEach(_subtract);\n        } else {\n            if (b == null) b = a;\n            _subtract(new SubRange(a, b));\n        }\n        return this;\n    }\n\n    intersect(a, b) {\n        var newRanges = [];\n        var _intersect = (subrange) => {\n            var i = 0;\n            while (i < this.ranges.length && !subrange.overlaps(this.ranges[i])) {\n                i++;\n            }\n            while (i < this.ranges.length && subrange.overlaps(this.ranges[i])) {\n                var low = Math.max(this.ranges[i].low, subrange.low);\n                var high = Math.min(this.ranges[i].high, subrange.high);\n                newRanges.push(new SubRange(low, high));\n                i++;\n            }\n        };\n\n        if (a instanceof DRange) {\n            a.ranges.forEach(_intersect);\n        } else {\n            if (b == null) b = a;\n            _intersect(new SubRange(a, b));\n        }\n        this.ranges = newRanges;\n        this._update_length();\n        return this;\n    }\n\n    index(index) {\n        var i = 0;\n        while (i < this.ranges.length && this.ranges[i].length <= index) {\n            index -= this.ranges[i].length;\n            i++;\n        }\n        return this.ranges[i].low + index;\n    }\n\n    toString() {\n        return '[ ' + this.ranges.join(', ') + ' ]';\n    }\n\n    clone() {\n        return new DRange(this);\n    }\n\n    numbers() {\n        return this.ranges.reduce((result, subrange) => {\n            var i = subrange.low;\n            while (i <= subrange.high) {\n                result.push(i);\n                i++;\n            }\n            return result;\n        }, []);\n    }\n\n    subranges() {\n        return this.ranges.map((subrange) => ({\n            low: subrange.low,\n            high: subrange.high,\n            length: 1 + subrange.high - subrange.low\n        }));\n    }\n}\n\nmodule.exports = DRange;\n"]},"metadata":{},"sourceType":"script"}