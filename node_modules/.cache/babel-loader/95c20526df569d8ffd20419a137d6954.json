{"ast":null,"code":"import { parseColor as parse, Color } from '@progress/kendo-drawing';\nimport { isPresent, fitIntoBounds } from './misc';\n/**\n * @hidden\n *\n * Returns the hex or RGBA string representation of the color.\n */\n\nexport var parseColor = function (value, format, safe) {\n  if (safe === void 0) {\n    safe = true;\n  }\n\n  var allowedFormats = ['hex', 'rgba']; // TODO: constant?\n  // Angular supports third type: name : const allowedFormats: Array<string> = ['hex', 'rgba', 'name'];\n\n  if (allowedFormats.indexOf(format) === -1) {\n    throw new Error(\"Unsupported color output format '\" + format + \"'. The available options are 'hex' or 'rgba'.\");\n  }\n\n  if (!isPresent(value)) {\n    return;\n  }\n\n  var parsedColor = parse(value.trim(), safe);\n\n  if (!isPresent(parsedColor)) {\n    return;\n  }\n\n  return format === 'hex' ? parsedColor.toCss() : parsedColor.toCssRgba();\n};\n/**\n * @hidden\n *\n * Returns an HSV object representation of the color string.\n */\n\nexport var getHSV = function (value, safe) {\n  if (safe === void 0) {\n    safe = true;\n  }\n\n  var parsed = parse(value, safe);\n\n  if (!isPresent(parsed)) {\n    return {};\n  }\n\n  return parsed.toHSV();\n};\n/**\n * @hidden\n *\n * Returns an RGBA object representation of the color string.\n */\n\nexport var getRGBA = function (value, safe) {\n  if (safe === void 0) {\n    safe = true;\n  }\n\n  var parsed = parse(value, safe);\n\n  if (!isPresent(parsed)) {\n    return {};\n  }\n\n  return parsed.toBytes();\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color.\n */\n\nexport var getColorFromHSV = function (hsva) {\n  var hue = fitIntoBounds(hsva.h, 0, 359.9);\n  var saturation = fitIntoBounds(hsva.s, 0, 1);\n  var value = fitIntoBounds(hsva.v, 0, 1);\n  var alpha = fitIntoBounds(hsva.a, 0, 1);\n  return Color.fromHSV(hue, saturation, value, alpha).toCssRgba();\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color based on the `hue` and\n * assuming the `value`, `saturation`, and `alpha` have a value of `1`.\n */\n\nexport var getColorFromHue = function (hue) {\n  return getColorFromHSV({\n    h: hue,\n    s: 1,\n    v: 1,\n    a: 1\n  });\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color.\n */\n\nexport var getColorFromRGBA = function (rgba) {\n  var red = fitIntoBounds(rgba.r, 0, 255);\n  var green = fitIntoBounds(rgba.g, 0, 255);\n  var blue = fitIntoBounds(rgba.b, 0, 255);\n  var alpha = fitIntoBounds(rgba.a, 0, 1);\n  return Color.fromBytes(red, green, blue, alpha).toCssRgba();\n};\n/**\n * @hidden\n *\n * Returns the RGB object representation of the color based on the background color.\n */\n\nexport var getRGBFromRGBA = function (foregroundColor, backgroundColor) {\n  var r1 = fitIntoBounds(foregroundColor.r, 0, 255);\n  var g1 = fitIntoBounds(foregroundColor.g, 0, 255);\n  var b1 = fitIntoBounds(foregroundColor.b, 0, 255);\n  var a1 = fitIntoBounds(foregroundColor.a, 0, 1);\n  var r2 = fitIntoBounds(backgroundColor.r, 0, 255);\n  var g2 = fitIntoBounds(backgroundColor.g, 0, 255);\n  var b2 = fitIntoBounds(backgroundColor.b, 0, 255);\n  return {\n    r: Math.round((1 - a1) * r2 + a1 * r1),\n    g: Math.round((1 - a1) * g2 + a1 * g1),\n    b: Math.round((1 - a1) * b2 + a1 * b1)\n  };\n};\n/**\n * @hidden\n *\n * Returns the relative luminance.\n */\n\nexport var getLuminance = function (rgb) {\n  var a = [rgb.r, rgb.g, rgb.b].map(function (v) {\n    v /= 255;\n    return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\n  });\n  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n};\n/**\n * @hidden\n *\n * Returns the color contrast.\n */\n\nexport var getContrast = function (luminance1, luminance2) {\n  var brightest = Math.max(luminance1, luminance2);\n  var darkest = Math.min(luminance1, luminance2);\n  return (brightest + 0.05) / (darkest + 0.05);\n};\n/**\n * @hidden\n *\n * Returns the color contrast from two RGBA colors.\n */\n\nexport var getContrastFromTwoRGBAs = function (a, b) {\n  return getContrast(getLuminance(getRGBFromRGBA(a, b)), getLuminance(getRGBFromRGBA(b, {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 1\n  })));\n};","map":{"version":3,"sources":["../../../../src/colors/utils/color-parser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { parseColor as parse, Color } from '@progress/kendo-drawing';\nimport { isPresent, fitIntoBounds } from './misc';\n/**\n * @hidden\n *\n * Returns the hex or RGBA string representation of the color.\n */\nexport var parseColor = function (value, format, safe) {\n    if (safe === void 0) { safe = true; }\n    var allowedFormats = ['hex', 'rgba']; // TODO: constant?\n    // Angular supports third type: name : const allowedFormats: Array<string> = ['hex', 'rgba', 'name'];\n    if (allowedFormats.indexOf(format) === -1) {\n        throw new Error(\"Unsupported color output format '\" + format + \"'. The available options are 'hex' or 'rgba'.\");\n    }\n    if (!isPresent(value)) {\n        return;\n    }\n    var parsedColor = parse(value.trim(), safe);\n    if (!isPresent(parsedColor)) {\n        return;\n    }\n    return format === 'hex' ? parsedColor.toCss() : parsedColor.toCssRgba();\n};\n/**\n * @hidden\n *\n * Returns an HSV object representation of the color string.\n */\nexport var getHSV = function (value, safe) {\n    if (safe === void 0) { safe = true; }\n    var parsed = parse(value, safe);\n    if (!isPresent(parsed)) {\n        return {};\n    }\n    return parsed.toHSV();\n};\n/**\n * @hidden\n *\n * Returns an RGBA object representation of the color string.\n */\nexport var getRGBA = function (value, safe) {\n    if (safe === void 0) { safe = true; }\n    var parsed = parse(value, safe);\n    if (!isPresent(parsed)) {\n        return {};\n    }\n    return parsed.toBytes();\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color.\n */\nexport var getColorFromHSV = function (hsva) {\n    var hue = fitIntoBounds(hsva.h, 0, 359.9);\n    var saturation = fitIntoBounds(hsva.s, 0, 1);\n    var value = fitIntoBounds(hsva.v, 0, 1);\n    var alpha = fitIntoBounds(hsva.a, 0, 1);\n    return Color.fromHSV(hue, saturation, value, alpha).toCssRgba();\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color based on the `hue` and\n * assuming the `value`, `saturation`, and `alpha` have a value of `1`.\n */\nexport var getColorFromHue = function (hue) {\n    return getColorFromHSV({ h: hue, s: 1, v: 1, a: 1 });\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color.\n */\nexport var getColorFromRGBA = function (rgba) {\n    var red = fitIntoBounds(rgba.r, 0, 255);\n    var green = fitIntoBounds(rgba.g, 0, 255);\n    var blue = fitIntoBounds(rgba.b, 0, 255);\n    var alpha = fitIntoBounds(rgba.a, 0, 1);\n    return Color.fromBytes(red, green, blue, alpha).toCssRgba();\n};\n/**\n * @hidden\n *\n * Returns the RGB object representation of the color based on the background color.\n */\nexport var getRGBFromRGBA = function (foregroundColor, backgroundColor) {\n    var r1 = fitIntoBounds(foregroundColor.r, 0, 255);\n    var g1 = fitIntoBounds(foregroundColor.g, 0, 255);\n    var b1 = fitIntoBounds(foregroundColor.b, 0, 255);\n    var a1 = fitIntoBounds(foregroundColor.a, 0, 1);\n    var r2 = fitIntoBounds(backgroundColor.r, 0, 255);\n    var g2 = fitIntoBounds(backgroundColor.g, 0, 255);\n    var b2 = fitIntoBounds(backgroundColor.b, 0, 255);\n    return {\n        r: Math.round(((1 - a1) * r2) + (a1 * r1)),\n        g: Math.round(((1 - a1) * g2) + (a1 * g1)),\n        b: Math.round(((1 - a1) * b2) + (a1 * b1))\n    };\n};\n/**\n * @hidden\n *\n * Returns the relative luminance.\n */\nexport var getLuminance = function (rgb) {\n    var a = [rgb.r, rgb.g, rgb.b].map(function (v) {\n        v /= 255;\n        return v <= 0.03928\n            ? v / 12.92\n            : Math.pow((v + 0.055) / 1.055, 2.4);\n    });\n    return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n};\n/**\n * @hidden\n *\n * Returns the color contrast.\n */\nexport var getContrast = function (luminance1, luminance2) {\n    var brightest = Math.max(luminance1, luminance2);\n    var darkest = Math.min(luminance1, luminance2);\n    return (brightest + 0.05)\n        / (darkest + 0.05);\n};\n/**\n * @hidden\n *\n * Returns the color contrast from two RGBA colors.\n */\nexport var getContrastFromTwoRGBAs = function (a, b) {\n    return getContrast(getLuminance(getRGBFromRGBA(a, b)), getLuminance(getRGBFromRGBA(b, { r: 0, g: 0, b: 0, a: 1 })));\n};\n//# sourceMappingURL=color-parser.js.map"]},"metadata":{},"sourceType":"module"}