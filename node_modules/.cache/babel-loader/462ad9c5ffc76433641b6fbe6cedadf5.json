{"ast":null,"code":"var _jsxFileName = \"D:\\\\Castro\\\\Development\\\\SalesReport\\\\SalesReport\\\\src\\\\uploadUser.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass UserUpload extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedFile: null,\n      allEmployee: []\n    };\n\n    this.onFileChange = event => {\n      let fileType = event.target.files[0].type;\n      let fileSize = event.target.files[0].size;\n\n      if (fileType === \"application/vnd.ms-excel\") {\n        alert.log(\"Upload Sucessfully\");\n      } else {\n        this.setState({\n          selectedFile: null\n        });\n        alert(\"File format not supported, please select only CSV file\");\n      }\n    };\n\n    this.onFileValidationNUpdate = () => {\n      //Read data from CSV\n      let validationCounter = 0;\n      let f = this.state.selectedFile;\n      const reader = new FileReader();\n\n      reader.onload = evt => {\n        const bstr = evt.target.result;\n        const wb = XLSX.read(bstr, {\n          type: \"binary\"\n        });\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        const data = XLSX.utils.sheet_to_csv(ws, {\n          header: 1\n        });\n        let employeeDataJSON = this.convertToJson(data);\n        let parsedJSON = JSON.parse(employeeDataJSON);\n\n        for (let emp in parsedJSON) {\n          let item = parsedJSON[emp];\n\n          if (item && item.id !== \"\") {\n            //Any row starting with “#” is considered a comment and ignored.\n            if (item.id !== \"#\") {\n              let allEmployeeData = this.state.allEmployee;\n              let checkEmpExist = allEmployeeData.find(x => x.id === item.id && x.username === item.username);\n\n              if (checkEmpExist) {\n                //Update Emp Record\n                this.updateEmpRecord(item);\n              } else {\n                //Create New Emp Record\n                this.createEmpRecord(item);\n              }\n            }\n          } else {\n            validationCounter++;\n          }\n        }\n      };\n\n      reader.readAsBinaryString(f); //one or more of the rows fails validation, the entire file is rejected\n\n      if (validationCounter <= 1) {\n        this.onFileUpload();\n      }\n    };\n\n    this.createEmpRecord = emp => {\n      try {\n        const resp = axios.post('https://nphc-hr.free.beeceptor.com/employees', emp);\n        alert('New Employee created');\n      } catch (err) {\n        // Handle Error Here\n        alert('New Employee Service failed ' + err);\n      }\n    };\n\n    this.updateEmpRecord = emp => {\n      try {\n        const resp = axios.put('https://nphc-hr.free.beeceptor.com/employees/' + emp.id, {\n          emp\n        });\n        alert('Employee details updated');\n      } catch (err) {\n        // Handle Error Here\n        alert('Employee Update Service failed ' + err);\n      }\n    };\n\n    this.onFileUpload = () => {\n      // File Upload to Backend\n      const formData = new FormData();\n      formData.append(\"myFile\", this.state.selectedFile, this.state.selectedFile.name);\n      console.log(this.state.selectedFile);\n\n      const sendPostRequest = async () => {\n        try {\n          const resp = await axios.post('https://nphc-hr.free.beeceptor.com/employees/upload', formData);\n          alert('File upload sucessfully ' + resp.status);\n        } catch (err) {\n          // Handle Error Here\n          alert('File upload failed ' + err);\n        }\n      };\n\n      sendPostRequest();\n    };\n\n    this.fileData = () => {\n      if (this.state.selectedFile) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"uploadMobileContent\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"File Details:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"File Name: \", this.state.selectedFile.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"File Type: \", this.state.selectedFile.type]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Last Modified:\", \" \", this.state.selectedFile.lastModifiedDate.toDateString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 9\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"uploadMobile\",\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Please select file before pressing the upload button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 9\n        }, this);\n      }\n    };\n  }\n\n  componentDidMount() {}\n\n  convertToJson(csv) {\n    var lines = csv.split(\"\\n\");\n    var result = [];\n    var headers = lines[0].split(\",\");\n\n    for (var i = 1; i < lines.length; i++) {\n      var obj = {};\n      var currentline = lines[i].split(\",\");\n\n      for (var j = 0; j < headers.length; j++) {\n        obj[headers[j]] = currentline[j];\n      }\n\n      result.push(obj);\n    } //return result; //JavaScript object\n\n\n    return JSON.stringify(result); //JSON\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fileUploadContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: this.onFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.onFileValidationNUpdate,\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), this.fileData()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default UserUpload;","map":{"version":3,"sources":["D:/Castro/Development/SalesReport/SalesReport/src/uploadUser.js"],"names":["React","Component","axios","XLSX","UserUpload","state","selectedFile","allEmployee","onFileChange","event","fileType","target","files","type","fileSize","size","alert","log","setState","onFileValidationNUpdate","validationCounter","f","reader","FileReader","onload","evt","bstr","result","wb","read","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_csv","header","employeeDataJSON","convertToJson","parsedJSON","JSON","parse","emp","item","id","allEmployeeData","checkEmpExist","find","x","username","updateEmpRecord","createEmpRecord","readAsBinaryString","onFileUpload","resp","post","err","put","formData","FormData","append","name","console","sendPostRequest","status","fileData","lastModifiedDate","toDateString","componentDidMount","csv","lines","split","headers","i","length","obj","currentline","j","push","stringify","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\n\r\nclass UserUpload extends Component {\r\n\r\n  state = {\r\n    selectedFile: null,\r\n    allEmployee: []\r\n  };\r\n  \r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n\r\n  onFileChange = event => {\r\n    let fileType = event.target.files[0].type;\r\n    let fileSize = event.target.files[0].size;\r\n    if (fileType === \"application/vnd.ms-excel\") {\r\n      alert.log(\"Upload Sucessfully\");\r\n    }\r\n    else {\r\n      this.setState({ selectedFile: null });\r\n      alert(\"File format not supported, please select only CSV file\");\r\n    }\r\n  };\r\n\r\n  convertToJson(csv) {\r\n    var lines = csv.split(\"\\n\");\r\n\r\n    var result = [];\r\n\r\n    var headers = lines[0].split(\",\");\r\n\r\n    for (var i = 1; i < lines.length; i++) {\r\n      var obj = {};\r\n      var currentline = lines[i].split(\",\");\r\n\r\n      for (var j = 0; j < headers.length; j++) {\r\n        obj[headers[j]] = currentline[j];\r\n      }\r\n\r\n      result.push(obj);\r\n    }\r\n\r\n    //return result; //JavaScript object\r\n    return JSON.stringify(result); //JSON\r\n  }\r\n\r\n  onFileValidationNUpdate = () => {\r\n\r\n    //Read data from CSV\r\n    let validationCounter = 0;\r\n    let f = this.state.selectedFile;\r\n    const reader = new FileReader();\r\n    reader.onload = (evt) => {\r\n\r\n      const bstr = evt.target.result;\r\n      const wb = XLSX.read(bstr, { type: \"binary\" });\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n\r\n\r\n      let employeeDataJSON = this.convertToJson(data);\r\n      let parsedJSON = JSON.parse(employeeDataJSON);\r\n      for (let emp in parsedJSON) {\r\n\r\n        let item = parsedJSON[emp];\r\n        if (item && item.id !== \"\") {\r\n\r\n          //Any row starting with “#” is considered a comment and ignored.\r\n          if (item.id !== \"#\") {\r\n            let allEmployeeData = this.state.allEmployee;\r\n            let checkEmpExist = allEmployeeData.find(x => x.id === item.id && x.username === item.username);\r\n            if (checkEmpExist) {\r\n              //Update Emp Record\r\n              this.updateEmpRecord(item);\r\n            }\r\n            else {\r\n              //Create New Emp Record\r\n              this.createEmpRecord(item);\r\n            }\r\n          }\r\n\r\n        }\r\n        else {\r\n          validationCounter++;\r\n        }\r\n      }\r\n\r\n    };\r\n    reader.readAsBinaryString(f);\r\n\r\n    //one or more of the rows fails validation, the entire file is rejected\r\n    if (validationCounter <= 1) {\r\n      this.onFileUpload();\r\n    }\r\n\r\n  };\r\n\r\n\r\n  createEmpRecord = (emp) => {\r\n    try {\r\n      const resp = axios.post('https://nphc-hr.free.beeceptor.com/employees', emp);\r\n      alert('New Employee created');\r\n    } catch (err) {\r\n      // Handle Error Here\r\n      alert('New Employee Service failed ' + err);\r\n    }\r\n  };\r\n\r\n  updateEmpRecord = (emp) => {\r\n    try {\r\n      const resp = axios.put('https://nphc-hr.free.beeceptor.com/employees/' + emp.id, { emp });\r\n      alert('Employee details updated');\r\n    } catch (err) {\r\n      // Handle Error Here\r\n      alert('Employee Update Service failed ' + err);\r\n    }\r\n  };\r\n\r\n\r\n  onFileUpload = () => {\r\n\r\n    // File Upload to Backend\r\n    const formData = new FormData();\r\n\r\n    formData.append(\r\n      \"myFile\",\r\n      this.state.selectedFile,\r\n      this.state.selectedFile.name\r\n    );\r\n\r\n    console.log(this.state.selectedFile);\r\n\r\n    const sendPostRequest = async () => {\r\n      try {\r\n        const resp = await axios.post('https://nphc-hr.free.beeceptor.com/employees/upload', formData);\r\n        alert('File upload sucessfully ' + resp.status);\r\n      } catch (err) {\r\n        // Handle Error Here\r\n        alert('File upload failed ' + err);\r\n      }\r\n    };\r\n\r\n    sendPostRequest();\r\n\r\n  };\r\n\r\n\r\n\r\n  // File content to be displayed after \r\n  fileData = () => {\r\n    if (this.state.selectedFile) {\r\n\r\n      return (\r\n        <div className=\"uploadMobileContent\">\r\n          <h2>File Details:</h2>\r\n          <p>File Name: {this.state.selectedFile.name}</p>\r\n          <p>File Type: {this.state.selectedFile.type}</p>\r\n          <p>\r\n            Last Modified:{\" \"}\r\n            {this.state.selectedFile.lastModifiedDate.toDateString()}\r\n          </p>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"uploadMobile\">\r\n          <br />\r\n          <h4>Please select file before pressing the upload button</h4>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"fileUploadContainer\">\r\n        <div>\r\n          <input type=\"file\" onChange={this.onFileChange} />\r\n          <button onClick={this.onFileValidationNUpdate}>\r\n            Upload\r\n          </button>\r\n        </div>\r\n        {this.fileData()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default UserUpload;\r\n"]},"metadata":{},"sourceType":"module"}