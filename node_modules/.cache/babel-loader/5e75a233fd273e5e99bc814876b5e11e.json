{"ast":null,"code":"import r from \"@bedrock-layout/use-stateful-ref\";\nimport t from \"react\";\n\nfunction e(e) {\n  var u = r(null);\n  return t.useEffect(function () {\n    e && (\"function\" == typeof e ? e(u.current) : e.current = u.current);\n  }), u;\n}\n\nexport default e;","map":{"version":3,"sources":["../src/index.tsx"],"names":["useForwardedRef","forwardedRef","innerRef","useStatefulRef","React","useEffect","current"],"mappings":";;;SAGwBA,C,CACtBC,C,EAAAA;AAEA,MAAMC,CAAAA,GAAWC,CAAAA,CAAkB,IAAlBA,CAAjB;AAYA,SAXAC,CAAAA,CAAMC,SAAND,CAAgB,YAAA;AACTH,IAAAA,CAAAA,KAEuB,cAAA,OAAjBA,CAAiB,GAC1BA,CAAAA,CAAaC,CAAAA,CAASI,OAAtBL,CAD0B,GAGzBA,CAAAA,CAAkDK,OAAlDL,GACCC,CAAAA,CAASI,OANRL,CAAAA;AAMQK,GAPfF,GAWOF,CAAP;AAAOA;;AAAAA,eAAAA,CAAAA","sourcesContent":["import useStatefulRef from \"@bedrock-layout/use-stateful-ref\";\nimport React from \"react\";\n\nexport default function useForwardedRef<T>(\n  forwardedRef: React.Ref<T>\n): React.MutableRefObject<T> {\n  const innerRef = useStatefulRef<T>(null);\n  React.useEffect(() => {\n    if (!forwardedRef) return;\n\n    if (typeof forwardedRef === \"function\") {\n      forwardedRef(innerRef.current);\n    } else {\n      (forwardedRef as React.MutableRefObject<T | null>).current =\n        innerRef.current;\n    }\n  });\n\n  return innerRef;\n}\n"]},"metadata":{},"sourceType":"module"}