{"ast":null,"code":"var _jsxFileName = \"D:\\\\Castro\\\\Development\\\\hr-management-portal\\\\hr-management-portal\\\\src\\\\uploadUser.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass UserUpload extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedFile: null\n    };\n\n    this.loadAllEmp = empid => {\n      const sendPostRequest = async () => {\n        try {\n          const resp = await axios.post('https://nphc-hr.free.beeceptor.com/employees/upload', formData);\n          alert('File upload sucessfully ' + resp.status);\n        } catch (err) {\n          // Handle Error Here\n          alert('File upload failed ' + err);\n        }\n      };\n    };\n\n    this.onFileChange = event => {\n      let fileType = event.target.files[0].type;\n      let fileSize = event.target.files[0].size;\n      const actualFileSize = Math.round(fileSize / 1024);\n\n      if (fileType === \"application/vnd.ms-excel\") {\n        if (actualFileSize <= 2048) {\n          this.setState({\n            selectedFile: event.target.files[0]\n          });\n        } else {\n          this.setState({\n            selectedFile: null\n          });\n          alert(\"File too big, please select a file lesser than 2mb\");\n        }\n      } else {\n        this.setState({\n          selectedFile: null\n        });\n        alert(\"File format not supported, please select only CSV file\");\n      }\n    };\n\n    this.onFileValidationNUpdate = () => {\n      //Read data from CSV\n      let f = this.state.selectedFile;\n      let name = f.name;\n      const reader = new FileReader();\n\n      reader.onload = evt => {\n        // evt = on_file_select event\n\n        /* Parse data */\n        const bstr = evt.target.result;\n        const wb = XLSX.read(bstr, {\n          type: \"binary\"\n        });\n        /* Get first worksheet */\n\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n\n        const data = XLSX.utils.sheet_to_csv(ws, {\n          header: 1\n        });\n        /* Update state */\n        //console.log(\"Data>>>\" + data);// shows that excel data is read\n        //console.log(this.convertToJson(data)); // shows data in json format\n\n        let employeeDataJSON = this.convertToJson(data);\n        var parsedJSON = JSON.parse(employeeDataJSON);\n\n        for (var item in parsedJSON) {\n          if (item && item.id !== \"\" && item.id !== \"#\") {\n            console.log(item);\n          }\n        }\n      };\n\n      reader.readAsBinaryString(f);\n    };\n\n    this.onFileUpload = () => {\n      // File Upload to Backend\n      const formData = new FormData();\n      formData.append(\"myFile\", this.state.selectedFile, this.state.selectedFile.name);\n      console.log(this.state.selectedFile);\n\n      const sendPostRequest = async () => {\n        try {\n          const resp = await axios.post('https://nphc-hr.free.beeceptor.com/employees/upload', formData);\n          alert('File upload sucessfully ' + resp.status);\n        } catch (err) {\n          // Handle Error Here\n          alert('File upload failed ' + err);\n        }\n      };\n\n      sendPostRequest();\n    };\n\n    this.fileData = () => {\n      if (this.state.selectedFile) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"File Details:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"File Name: \", this.state.selectedFile.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"File Type: \", this.state.selectedFile.type]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Last Modified:\", \" \", this.state.selectedFile.lastModifiedDate.toDateString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Please select file before pressing the upload button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 9\n        }, this);\n      }\n    };\n  }\n\n  convertToJson(csv) {\n    var lines = csv.split(\"\\n\");\n    var result = [];\n    var headers = lines[0].split(\",\");\n\n    for (var i = 1; i < lines.length; i++) {\n      var obj = {};\n      var currentline = lines[i].split(\",\");\n\n      for (var j = 0; j < headers.length; j++) {\n        obj[headers[j]] = currentline[j];\n      }\n\n      result.push(obj);\n    } //return result; //JavaScript object\n\n\n    return JSON.stringify(result); //JSON\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fileUploadContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: this.onFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.onFileValidationNUpdate,\n          children: \"Upload!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), this.fileData()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default UserUpload;","map":{"version":3,"sources":["D:/Castro/Development/hr-management-portal/hr-management-portal/src/uploadUser.js"],"names":["React","Component","axios","XLSX","UserUpload","state","selectedFile","loadAllEmp","empid","sendPostRequest","resp","post","formData","alert","status","err","onFileChange","event","fileType","target","files","type","fileSize","size","actualFileSize","Math","round","setState","onFileValidationNUpdate","f","name","reader","FileReader","onload","evt","bstr","result","wb","read","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_csv","header","employeeDataJSON","convertToJson","parsedJSON","JSON","parse","item","id","console","log","readAsBinaryString","onFileUpload","FormData","append","fileData","lastModifiedDate","toDateString","csv","lines","split","headers","i","length","obj","currentline","j","push","stringify","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\n\r\nclass UserUpload extends Component {\r\n\r\n  state = {\r\n    selectedFile: null\r\n  };\r\n\r\n\r\n  loadAllEmp = (empid) => {\r\n\r\n    const sendPostRequest = async () => {\r\n      try {\r\n        const resp = await axios.post('https://nphc-hr.free.beeceptor.com/employees/upload', formData);\r\n        alert('File upload sucessfully ' + resp.status);\r\n      } catch (err) {\r\n        // Handle Error Here\r\n        alert('File upload failed ' + err);\r\n      }\r\n    };\r\n\r\n  };\r\n\r\n  onFileChange = event => {\r\n    let fileType = event.target.files[0].type;\r\n    let fileSize = event.target.files[0].size;\r\n    const actualFileSize = Math.round((fileSize / 1024));\r\n    if (fileType === \"application/vnd.ms-excel\") {\r\n      if (actualFileSize <= 2048) {\r\n        this.setState({ selectedFile: event.target.files[0] });\r\n      }\r\n      else {\r\n        this.setState({ selectedFile: null });\r\n        alert(\"File too big, please select a file lesser than 2mb\");\r\n      }\r\n    }\r\n    else {\r\n      this.setState({ selectedFile: null });\r\n      alert(\"File format not supported, please select only CSV file\");\r\n    }\r\n  };\r\n\r\n  convertToJson(csv) {\r\n    var lines = csv.split(\"\\n\");\r\n\r\n    var result = [];\r\n\r\n    var headers = lines[0].split(\",\");\r\n\r\n    for (var i = 1; i < lines.length; i++) {\r\n      var obj = {};\r\n      var currentline = lines[i].split(\",\");\r\n\r\n      for (var j = 0; j < headers.length; j++) {\r\n        obj[headers[j]] = currentline[j];\r\n      }\r\n\r\n      result.push(obj);\r\n    }\r\n\r\n    //return result; //JavaScript object\r\n    return JSON.stringify(result); //JSON\r\n  }\r\n\r\n  onFileValidationNUpdate = () => {\r\n\r\n     //Read data from CSV\r\n     let f = this.state.selectedFile;\r\n     let name = f.name;\r\n     const reader = new FileReader();\r\n     reader.onload = (evt) => {\r\n       // evt = on_file_select event\r\n       /* Parse data */\r\n       const bstr = evt.target.result;\r\n       const wb = XLSX.read(bstr, { type: \"binary\" });\r\n       /* Get first worksheet */\r\n       const wsname = wb.SheetNames[0];\r\n       const ws = wb.Sheets[wsname];\r\n       /* Convert array of arrays */\r\n       const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n      \r\n       /* Update state */\r\n       //console.log(\"Data>>>\" + data);// shows that excel data is read\r\n       //console.log(this.convertToJson(data)); // shows data in json format\r\n\r\n       let employeeDataJSON = this.convertToJson(data);\r\n\r\n       var parsedJSON = JSON.parse(employeeDataJSON);\r\n       for (var item in parsedJSON) {\r\n         if (item && item.id !== \"\" && item.id !== \"#\") {\r\n            console.log(item);\r\n         }\r\n       }\r\n\r\n     };\r\n     reader.readAsBinaryString(f);\r\n\r\n  };\r\n\r\n  \r\n\r\n  onFileUpload = () => {\r\n\r\n    // File Upload to Backend\r\n    const formData = new FormData();\r\n\r\n    formData.append(\r\n      \"myFile\",\r\n      this.state.selectedFile,\r\n      this.state.selectedFile.name\r\n    );\r\n\r\n    console.log(this.state.selectedFile);\r\n\r\n    const sendPostRequest = async () => {\r\n      try {\r\n        const resp = await axios.post('https://nphc-hr.free.beeceptor.com/employees/upload', formData);\r\n        alert('File upload sucessfully ' + resp.status);\r\n      } catch (err) {\r\n        // Handle Error Here\r\n        alert('File upload failed ' + err);\r\n      }\r\n    };\r\n\r\n    sendPostRequest();\r\n\r\n  };\r\n\r\n\r\n\r\n  // File content to be displayed after \r\n  fileData = () => {\r\n    if (this.state.selectedFile) {\r\n\r\n      return (\r\n        <div>\r\n          <h2>File Details:</h2>\r\n          <p>File Name: {this.state.selectedFile.name}</p>\r\n          <p>File Type: {this.state.selectedFile.type}</p>\r\n          <p>\r\n            Last Modified:{\" \"}\r\n            {this.state.selectedFile.lastModifiedDate.toDateString()}\r\n          </p>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <br />\r\n          <h4>Please select file before pressing the upload button</h4>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"fileUploadContainer\">\r\n        <div>\r\n          <input type=\"file\" onChange={this.onFileChange} />\r\n          <button onClick={this.onFileValidationNUpdate}>\r\n            Upload!\r\n          </button>\r\n        </div>\r\n        {this.fileData()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default UserUpload;\r\n"]},"metadata":{},"sourceType":"module"}