{"ast":null,"code":"var _jsxFileName = \"D:\\\\Castro\\\\Development\\\\SalesReport\\\\SalesReport\\\\src\\\\uploadUser.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass UserUpload extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedFile: null,\n      allRecords: []\n    };\n\n    this.onFileChange = event => {\n      let fileType = event.target.files[0].type;\n      let fileSize = event.target.files[0].size;\n\n      if (fileType === \"application/vnd.ms-excel\") {\n        this.setState({\n          selectedFile: event.target.files[0]\n        });\n        console.log(\"Upload Sucessfully\");\n      } else {\n        this.setState({\n          selectedFile: null\n        });\n        alert(\"File format not supported, please select only CSV file\");\n      }\n    };\n\n    this.onFileValidationNUpdate = () => {\n      //Read data from CSV\n      let validationCounter = 0;\n      let f = this.state.selectedFile;\n      const reader = new FileReader();\n\n      reader.onload = evt => {\n        const bstr = evt.target.result;\n        const wb = XLSX.read(bstr, {\n          type: \"binary\"\n        });\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        const data = XLSX.utils.sheet_to_csv(ws, {\n          header: 1\n        });\n        let employeeDataJSON = this.convertToJson(data);\n        let parsedJSON = JSON.parse(employeeDataJSON);\n        var myArrayFiltered = parsedJSON.filter(ele => {\n          return ele.constructor === Object && Object.keys(ele).length > 0;\n        });\n      };\n\n      reader.readAsBinaryString(f); //this.onFileUpload();\n    };\n\n    this.removeEmptyOrNull = obj => {\n      Object.keys(obj).forEach(k => obj[k] && typeof obj[k] === 'object' && removeEmptyOrNull(obj[k]) || !obj[k] && obj[k] !== undefined && delete obj[k]);\n      return obj;\n    };\n\n    this.createEmpRecord = emp => {\n      try {\n        const resp = axios.post('https://nphc-hr.free.beeceptor.com/employees', emp);\n        alert('New Employee created');\n      } catch (err) {\n        // Handle Error Here\n        alert('New Employee Service failed ' + err);\n      }\n    };\n\n    this.updateEmpRecord = emp => {\n      try {\n        const resp = axios.put('https://nphc-hr.free.beeceptor.com/employees/' + emp.id, {\n          emp\n        });\n        alert('Employee details updated');\n      } catch (err) {\n        // Handle Error Here\n        alert('Employee Update Service failed ' + err);\n      }\n    };\n\n    this.onFileUpload = () => {\n      // File Upload to Backend\n      const formData = new FormData();\n      formData.append(\"myFile\", this.state.selectedFile, this.state.selectedFile.name);\n      console.log(this.state.selectedFile);\n    };\n\n    this.fileData = () => {\n      if (this.state.selectedFile) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"uploadMobileContent\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"File Details:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"File Name: \", this.state.selectedFile.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"File Type: \", this.state.selectedFile.type]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Last Modified:\", \" \", this.state.selectedFile.lastModifiedDate.toDateString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"uploadMobile\",\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Please select file before pressing the upload button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 9\n        }, this);\n      }\n    };\n  }\n\n  componentDidMount() {}\n\n  convertToJson(csv) {\n    var lines = csv.split(\"\\n\");\n    var result = [];\n    var headers = lines[0].split(\",\");\n\n    for (var i = 1; i < lines.length; i++) {\n      var obj = {};\n      var currentline = lines[i].split(\",\");\n\n      for (var j = 0; j < headers.length; j++) {\n        obj[headers[j]] = currentline[j];\n      }\n\n      result.push(obj);\n    } //return result; //JavaScript object\n\n\n    return JSON.stringify(result); //JSON\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fileUploadContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: this.onFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.onFileValidationNUpdate,\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), this.fileData()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default UserUpload;","map":{"version":3,"sources":["D:/Castro/Development/SalesReport/SalesReport/src/uploadUser.js"],"names":["React","Component","axios","XLSX","UserUpload","state","selectedFile","allRecords","onFileChange","event","fileType","target","files","type","fileSize","size","setState","console","log","alert","onFileValidationNUpdate","validationCounter","f","reader","FileReader","onload","evt","bstr","result","wb","read","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_csv","header","employeeDataJSON","convertToJson","parsedJSON","JSON","parse","myArrayFiltered","filter","ele","constructor","Object","keys","length","readAsBinaryString","removeEmptyOrNull","obj","forEach","k","undefined","createEmpRecord","emp","resp","post","err","updateEmpRecord","put","id","onFileUpload","formData","FormData","append","name","fileData","lastModifiedDate","toDateString","componentDidMount","csv","lines","split","headers","i","currentline","j","push","stringify","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;;;AAEA,MAAMC,UAAN,SAAyBH,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAEjCI,KAFiC,GAEzB;AACNC,MAAAA,YAAY,EAAE,IADR;AAENC,MAAAA,UAAU,EAAE;AAFN,KAFyB;;AAAA,SAYjCC,YAZiC,GAYlBC,KAAK,IAAI;AACtB,UAAIC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmB,CAAnB,EAAsBC,IAArC;AACA,UAAIC,QAAQ,GAAGL,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmB,CAAnB,EAAsBG,IAArC;;AACA,UAAIL,QAAQ,KAAK,0BAAjB,EAA6C;AAC3C,aAAKM,QAAL,CAAc;AAAEV,UAAAA,YAAY,EAAEG,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmB,CAAnB;AAAhB,SAAd;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,OAHD,MAIK;AACH,aAAKF,QAAL,CAAc;AAAEV,UAAAA,YAAY,EAAE;AAAhB,SAAd;AACAa,QAAAA,KAAK,CAAC,wDAAD,CAAL;AACD;AACF,KAvBgC;;AAAA,SA+CjCC,uBA/CiC,GA+CP,MAAM;AAE9B;AACA,UAAIC,iBAAiB,GAAG,CAAxB;AACA,UAAIC,CAAC,GAAG,KAAKjB,KAAL,CAAWC,YAAnB;AACA,YAAMiB,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,MAAAA,MAAM,CAACE,MAAP,GAAiBC,GAAD,IAAS;AAEvB,cAAMC,IAAI,GAAGD,GAAG,CAACf,MAAJ,CAAWiB,MAAxB;AACA,cAAMC,EAAE,GAAG1B,IAAI,CAAC2B,IAAL,CAAUH,IAAV,EAAgB;AAAEd,UAAAA,IAAI,EAAE;AAAR,SAAhB,CAAX;AACA,cAAMkB,MAAM,GAAGF,EAAE,CAACG,UAAH,CAAc,CAAd,CAAf;AACA,cAAMC,EAAE,GAAGJ,EAAE,CAACK,MAAH,CAAUH,MAAV,CAAX;AACA,cAAMI,IAAI,GAAGhC,IAAI,CAACiC,KAAL,CAAWC,YAAX,CAAwBJ,EAAxB,EAA4B;AAAEK,UAAAA,MAAM,EAAE;AAAV,SAA5B,CAAb;AAGA,YAAIC,gBAAgB,GAAG,KAAKC,aAAL,CAAmBL,IAAnB,CAAvB;AACA,YAAIM,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWJ,gBAAX,CAAjB;AAEA,YAAIK,eAAe,GAAGH,UAAU,CAACI,MAAX,CAAmBC,GAAD,IAAS;AAC/C,iBAAOA,GAAG,CAACC,WAAJ,KAAoBC,MAApB,IAA8BA,MAAM,CAACC,IAAP,CAAYH,GAAZ,EAAiBI,MAAjB,GAA0B,CAA/D;AACD,SAFqB,CAAtB;AAID,OAhBD;;AAiBA3B,MAAAA,MAAM,CAAC4B,kBAAP,CAA0B7B,CAA1B,EAvB8B,CAyB9B;AAGD,KA3EgC;;AAAA,SA6EjC8B,iBA7EiC,GA6EZC,GAAD,IAAS;AAC3BL,MAAAA,MAAM,CAACC,IAAP,CAAYI,GAAZ,EAAiBC,OAAjB,CAAyBC,CAAC,IACvBF,GAAG,CAACE,CAAD,CAAH,IAAU,OAAOF,GAAG,CAACE,CAAD,CAAV,KAAkB,QAA7B,IAA0CH,iBAAiB,CAACC,GAAG,CAACE,CAAD,CAAJ,CAA3D,IACC,CAACF,GAAG,CAACE,CAAD,CAAJ,IAAWF,GAAG,CAACE,CAAD,CAAH,KAAWC,SAAvB,IAAqC,OAAOH,GAAG,CAACE,CAAD,CAFjD;AAIA,aAAOF,GAAP;AACD,KAnFgC;;AAAA,SAsFjCI,eAtFiC,GAsFdC,GAAD,IAAS;AACzB,UAAI;AACF,cAAMC,IAAI,GAAGzD,KAAK,CAAC0D,IAAN,CAAW,8CAAX,EAA2DF,GAA3D,CAAb;AACAvC,QAAAA,KAAK,CAAC,sBAAD,CAAL;AACD,OAHD,CAGE,OAAO0C,GAAP,EAAY;AACZ;AACA1C,QAAAA,KAAK,CAAC,iCAAiC0C,GAAlC,CAAL;AACD;AACF,KA9FgC;;AAAA,SAgGjCC,eAhGiC,GAgGdJ,GAAD,IAAS;AACzB,UAAI;AACF,cAAMC,IAAI,GAAGzD,KAAK,CAAC6D,GAAN,CAAU,kDAAkDL,GAAG,CAACM,EAAhE,EAAoE;AAAEN,UAAAA;AAAF,SAApE,CAAb;AACAvC,QAAAA,KAAK,CAAC,0BAAD,CAAL;AACD,OAHD,CAGE,OAAO0C,GAAP,EAAY;AACZ;AACA1C,QAAAA,KAAK,CAAC,oCAAoC0C,GAArC,CAAL;AACD;AACF,KAxGgC;;AAAA,SA2GjCI,YA3GiC,GA2GlB,MAAM;AAEnB;AACA,YAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AAEAD,MAAAA,QAAQ,CAACE,MAAT,CACE,QADF,EAEE,KAAK/D,KAAL,CAAWC,YAFb,EAGE,KAAKD,KAAL,CAAWC,YAAX,CAAwB+D,IAH1B;AAMApD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,KAAL,CAAWC,YAAvB;AACD,KAvHgC;;AAAA,SA4HjCgE,QA5HiC,GA4HtB,MAAM;AACf,UAAI,KAAKjE,KAAL,CAAWC,YAAf,EAA6B;AAE3B,4BACE;AAAK,UAAA,SAAS,EAAC,qBAAf;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sCAAe,KAAKD,KAAL,CAAWC,YAAX,CAAwB+D,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA,sCAAe,KAAKhE,KAAL,CAAWC,YAAX,CAAwBO,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAA,yCACiB,GADjB,EAEG,KAAKR,KAAL,CAAWC,YAAX,CAAwBiE,gBAAxB,CAAyCC,YAAzC,EAFH;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAWD,OAbD,MAaO;AACL,4BACE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAMD;AACF,KAlJgC;AAAA;;AAQjCC,EAAAA,iBAAiB,GAAG,CACnB;;AAgBDjC,EAAAA,aAAa,CAACkC,GAAD,EAAM;AACjB,QAAIC,KAAK,GAAGD,GAAG,CAACE,KAAJ,CAAU,IAAV,CAAZ;AAEA,QAAIhD,MAAM,GAAG,EAAb;AAEA,QAAIiD,OAAO,GAAGF,KAAK,CAAC,CAAD,CAAL,CAASC,KAAT,CAAe,GAAf,CAAd;;AAEA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACzB,MAA1B,EAAkC4B,CAAC,EAAnC,EAAuC;AACrC,UAAIzB,GAAG,GAAG,EAAV;AACA,UAAI0B,WAAW,GAAGJ,KAAK,CAACG,CAAD,CAAL,CAASF,KAAT,CAAe,GAAf,CAAlB;;AAEA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAAC3B,MAA5B,EAAoC8B,CAAC,EAArC,EAAyC;AACvC3B,QAAAA,GAAG,CAACwB,OAAO,CAACG,CAAD,CAAR,CAAH,GAAkBD,WAAW,CAACC,CAAD,CAA7B;AACD;;AAEDpD,MAAAA,MAAM,CAACqD,IAAP,CAAY5B,GAAZ;AACD,KAhBgB,CAkBjB;;;AACA,WAAOX,IAAI,CAACwC,SAAL,CAAetD,MAAf,CAAP,CAnBiB,CAmBc;AAChC;;AAuGDuD,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,8BACE;AAAA,gCACE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,QAAQ,EAAE,KAAK3E;AAAlC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,OAAO,EAAE,KAAKY,uBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAOG,KAAKkD,QAAL,EAPH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AAhKgC;;AAqKnC,eAAelE,UAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\n\r\nclass UserUpload extends Component {\r\n\r\n  state = {\r\n    selectedFile: null,\r\n    allRecords: []\r\n  };\r\n  \r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n\r\n  onFileChange = event => {\r\n    let fileType = event.target.files[0].type;\r\n    let fileSize = event.target.files[0].size;\r\n    if (fileType === \"application/vnd.ms-excel\") {\r\n      this.setState({ selectedFile: event.target.files[0] });\r\n      console.log(\"Upload Sucessfully\");\r\n    }\r\n    else {\r\n      this.setState({ selectedFile: null });\r\n      alert(\"File format not supported, please select only CSV file\");\r\n    }\r\n  };\r\n\r\n  convertToJson(csv) {\r\n    var lines = csv.split(\"\\n\");\r\n\r\n    var result = [];\r\n\r\n    var headers = lines[0].split(\",\");\r\n\r\n    for (var i = 1; i < lines.length; i++) {\r\n      var obj = {};\r\n      var currentline = lines[i].split(\",\");\r\n\r\n      for (var j = 0; j < headers.length; j++) {\r\n        obj[headers[j]] = currentline[j];\r\n      }\r\n\r\n      result.push(obj);\r\n    }\r\n\r\n    //return result; //JavaScript object\r\n    return JSON.stringify(result); //JSON\r\n  }\r\n\r\n  onFileValidationNUpdate = () => {\r\n\r\n    //Read data from CSV\r\n    let validationCounter = 0;\r\n    let f = this.state.selectedFile;\r\n    const reader = new FileReader();\r\n    reader.onload = (evt) => {\r\n\r\n      const bstr = evt.target.result;\r\n      const wb = XLSX.read(bstr, { type: \"binary\" });\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n\r\n\r\n      let employeeDataJSON = this.convertToJson(data);\r\n      let parsedJSON = JSON.parse(employeeDataJSON);\r\n      \r\n      var myArrayFiltered = parsedJSON.filter((ele) => {\r\n        return ele.constructor === Object && Object.keys(ele).length > 0\r\n      });\r\n\r\n    };\r\n    reader.readAsBinaryString(f);\r\n\r\n    //this.onFileUpload();\r\n    \r\n\r\n  };\r\n\r\n  removeEmptyOrNull = (obj) => {\r\n    Object.keys(obj).forEach(k =>\r\n      (obj[k] && typeof obj[k] === 'object') && removeEmptyOrNull(obj[k]) ||\r\n      (!obj[k] && obj[k] !== undefined) && delete obj[k]\r\n    );\r\n    return obj;\r\n  };\r\n\r\n\r\n  createEmpRecord = (emp) => {\r\n    try {\r\n      const resp = axios.post('https://nphc-hr.free.beeceptor.com/employees', emp);\r\n      alert('New Employee created');\r\n    } catch (err) {\r\n      // Handle Error Here\r\n      alert('New Employee Service failed ' + err);\r\n    }\r\n  };\r\n\r\n  updateEmpRecord = (emp) => {\r\n    try {\r\n      const resp = axios.put('https://nphc-hr.free.beeceptor.com/employees/' + emp.id, { emp });\r\n      alert('Employee details updated');\r\n    } catch (err) {\r\n      // Handle Error Here\r\n      alert('Employee Update Service failed ' + err);\r\n    }\r\n  };\r\n\r\n\r\n  onFileUpload = () => {\r\n\r\n    // File Upload to Backend\r\n    const formData = new FormData();\r\n\r\n    formData.append(\r\n      \"myFile\",\r\n      this.state.selectedFile,\r\n      this.state.selectedFile.name\r\n    );\r\n\r\n    console.log(this.state.selectedFile);\r\n  };\r\n\r\n\r\n\r\n  // File content to be displayed after \r\n  fileData = () => {\r\n    if (this.state.selectedFile) {\r\n\r\n      return (\r\n        <div className=\"uploadMobileContent\">\r\n          <h2>File Details:</h2>\r\n          <p>File Name: {this.state.selectedFile.name}</p>\r\n          <p>File Type: {this.state.selectedFile.type}</p>\r\n          <p>\r\n            Last Modified:{\" \"}\r\n            {this.state.selectedFile.lastModifiedDate.toDateString()}\r\n          </p>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"uploadMobile\">\r\n          <br />\r\n          <h4>Please select file before pressing the upload button</h4>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"fileUploadContainer\">\r\n        <div>\r\n          <input type=\"file\" onChange={this.onFileChange} />\r\n          <button onClick={this.onFileValidationNUpdate}>\r\n            Upload\r\n          </button>\r\n        </div>\r\n        {this.fileData()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default UserUpload;\r\n"]},"metadata":{},"sourceType":"module"}