import * as React from 'react';
import * as PropTypes from 'prop-types';
import { TableKeyboardNavigationContextType } from '@progress/kendo-react-data-tools';
import { CommonDragLogic } from './drag/CommonDragLogic';
import { GridProps } from './interfaces/GridProps';
import { GridColumnProps } from './interfaces/GridColumnProps';
/**
 * Represents the [KendoReact Grid component]({% slug overview_grid %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *    constructor(props) {
 *        super(props);
 *        this.state = {
 *            data: [
 *                { 'foo': 'A1', 'bar': 'B1' },
 *                { 'foo': 'A2', 'bar': 'B2' },
 *                { 'foo': 'A3', 'bar': 'B2' }
 *            ]
 *        };
 *    }
 *    render() {
 *        return (
 *            <Grid
 *                data={this.state.data}
 *                reorderable={true}
 *            >
 *                <GridColumn field="foo" />
 *                <GridColumn field="bar" />
 *            </Grid>
 *        );
 *    }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare class Grid extends React.Component<GridProps, {}> {
    /**
     * @hidden
     */
    static displayName: string;
    /**
     * @hidden
     */
    static defaultProps: {};
    /**
     * @hidden
     */
    static propTypes: {
        data: PropTypes.Requireable<any[] | PropTypes.InferProps<{
            data: PropTypes.Requireable<any[]>;
            total: PropTypes.Requireable<number>;
        }>>;
        sortable: PropTypes.Requireable<boolean | PropTypes.InferProps<{
            mode: PropTypes.Requireable<string>;
            allowUnsort: PropTypes.Requireable<boolean>;
        }>>;
        onSortChange: PropTypes.Requireable<(...args: any[]) => any>;
        sort: PropTypes.Requireable<any[]>;
        filterable: PropTypes.Requireable<boolean>;
        filter: PropTypes.Requireable<any>;
        onFilterChange: PropTypes.Requireable<(...args: any[]) => any>;
        pageable: PropTypes.Requireable<boolean | PropTypes.InferProps<{
            buttonCount: PropTypes.Requireable<number>;
            info: PropTypes.Requireable<boolean>;
            type: PropTypes.Requireable<string>;
            pageSizes: PropTypes.Requireable<boolean | number[]>;
            previousNext: PropTypes.Requireable<boolean>;
        }>>;
        pageSize: PropTypes.Requireable<number>;
        onPageChange: PropTypes.Requireable<(...args: any[]) => any>;
        total: PropTypes.Requireable<number>;
        skip: PropTypes.Requireable<number>;
        take: PropTypes.Requireable<number>;
        fixedScroll: PropTypes.Requireable<boolean>;
        onExpandChange: PropTypes.Requireable<(...args: any[]) => any>;
        expandField: PropTypes.Requireable<string>;
        selectedField: PropTypes.Requireable<string>;
        onSelectionChange: PropTypes.Requireable<(...args: any[]) => any>;
        onHeaderSelectionChange: PropTypes.Requireable<(...args: any[]) => any>;
        resizable: PropTypes.Requireable<boolean>;
        reorderable: PropTypes.Requireable<boolean>;
        group: PropTypes.Requireable<any>;
        groupable: PropTypes.Requireable<boolean | PropTypes.InferProps<{
            enabled: PropTypes.Requireable<boolean>;
            footer: PropTypes.Requireable<string>;
        }>>;
        onGroupChange: PropTypes.Requireable<(...args: any[]) => any>;
        onRowClick: PropTypes.Requireable<(...args: any[]) => any>;
        onRowDoubleClick: PropTypes.Requireable<(...args: any[]) => any>;
        onItemChange: PropTypes.Requireable<(...args: any[]) => any>;
        editField: PropTypes.Requireable<string>;
        scrollable: PropTypes.Requireable<string>;
        rowHeight: PropTypes.Requireable<number>;
        detail: PropTypes.Requireable<any>;
        style: PropTypes.Requireable<object>;
        onDataStateChange: PropTypes.Requireable<(...args: any[]) => any>;
        onColumnResize: PropTypes.Requireable<(...args: any[]) => any>;
        onColumnReorder: PropTypes.Requireable<(...args: any[]) => any>;
        dataItemKey: PropTypes.Requireable<string>;
        navigatable: PropTypes.Requireable<boolean>;
    };
    /** @hidden */
    static contextType: React.Context<TableKeyboardNavigationContextType>;
    protected dragLogic: CommonDragLogic;
    private _columns;
    private _columnsMap;
    private contextStateRef;
    private navigationStateRef;
    private _data;
    /**
     * A getter of the current columns. Gets the current column width or current columns, or any other [`GridColumnProps`]({% slug api_grid_gridcolumnprops %}) for each defined column. Can be used on each Grid instance. To obtain the instance of the rendered Grid, use the `ref` callback. The following example demonstrates how to reorder the columns by dragging their handlers and check the properties afterwards. You can check the result in the browser console.
     *
     * @example
     * ```jsx
     * class App extends React.Component {
     *     constructor(props) {
     *         super(props);
     *         this.state = {
     *             data: [
     *                 { 'foo': 'A1', 'bar': 'B1' },
     *                 { 'foo': 'A2', 'bar': 'B2' },
     *                 { 'foo': 'A3', 'bar': 'B2' }
     *             ]
     *         };
     *         this.grid = null;
     *     }
     *     render() {
     *         return (
     *             <div>
     *                 <Grid
     *                     data={this.state.data}
     *                     reorderable={true}
     *                     ref={(g) => { this.grid = g; }}
     *                 >
     *                     <GridColumn field="foo" />
     *                     <GridColumn field="bar" />
     *                 </Grid>
     *                 <button onClick={() => console.log(JSON.stringify(this.grid.columns))}>
     *                     log current properties into browser console.
     *                 </button>
     *             </div>
     *         );
     *     }
     * }
     * ReactDOM.render(<App />, document.querySelector('my-app'));
     * ```
     */
    readonly columns: GridColumnProps[];
    private element;
    private vs;
    private columnResize;
    private _header;
    private _footer;
    private forceUpdateTimeout;
    private isRtl;
    private _gridId;
    constructor(props: GridProps);
    /**
     * Method to allow the scroll to be set to a specific row index.
     *
     * @param options - Object, containing the rowIndex to which is going to be scrolled.
     */
    scrollIntoView: (options: {
        rowIndex: number;
    }) => void;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    getSnapshotBeforeUpdate(): any;
    /**
     * @hidden
     */
    componentDidUpdate(): void;
    /**
     * @hidden
     */
    componentWillUnmount(): void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    private scrollHandler;
    private onKeyDown;
    private onFocus;
    private onNavigationAction;
    private rowClick;
    private rowDblClick;
    private itemChange;
    private selectionChange;
    private onHeaderSelectionChange;
    private selectionRelease;
    private pageChange;
    private pagerPageChange;
    private sortChange;
    private filterChange;
    private groupChange;
    private raiseDataEvent;
    private columnReorder;
    private groupReorder;
    private columnToGroup;
    private resetTableWidth;
    private onResize;
    private initColumns;
    private resolveTitle;
    private getDataState;
    private getArguments;
    private getLeafDataItems;
}
