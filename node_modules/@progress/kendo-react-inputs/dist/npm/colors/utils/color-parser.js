"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var kendo_drawing_1 = require("@progress/kendo-drawing");
var misc_1 = require("./misc");
/**
 * @hidden
 *
 * Returns the hex or RGBA string representation of the color.
 */
exports.parseColor = function (value, format, safe) {
    if (safe === void 0) { safe = true; }
    var allowedFormats = ['hex', 'rgba']; // TODO: constant?
    // Angular supports third type: name : const allowedFormats: Array<string> = ['hex', 'rgba', 'name'];
    if (allowedFormats.indexOf(format) === -1) {
        throw new Error("Unsupported color output format '" + format + "'. The available options are 'hex' or 'rgba'.");
    }
    if (!misc_1.isPresent(value)) {
        return;
    }
    var parsedColor = kendo_drawing_1.parseColor(value.trim(), safe);
    if (!misc_1.isPresent(parsedColor)) {
        return;
    }
    return format === 'hex' ? parsedColor.toCss() : parsedColor.toCssRgba();
};
/**
 * @hidden
 *
 * Returns an HSV object representation of the color string.
 */
exports.getHSV = function (value, safe) {
    if (safe === void 0) { safe = true; }
    var parsed = kendo_drawing_1.parseColor(value, safe);
    if (!misc_1.isPresent(parsed)) {
        return {};
    }
    return parsed.toHSV();
};
/**
 * @hidden
 *
 * Returns an RGBA object representation of the color string.
 */
exports.getRGBA = function (value, safe) {
    if (safe === void 0) { safe = true; }
    var parsed = kendo_drawing_1.parseColor(value, safe);
    if (!misc_1.isPresent(parsed)) {
        return {};
    }
    return parsed.toBytes();
};
/**
 * @hidden
 *
 * Returns the RGBA string representation of the color.
 */
exports.getColorFromHSV = function (hsva) {
    var hue = misc_1.fitIntoBounds(hsva.h, 0, 359.9);
    var saturation = misc_1.fitIntoBounds(hsva.s, 0, 1);
    var value = misc_1.fitIntoBounds(hsva.v, 0, 1);
    var alpha = misc_1.fitIntoBounds(hsva.a, 0, 1);
    return kendo_drawing_1.Color.fromHSV(hue, saturation, value, alpha).toCssRgba();
};
/**
 * @hidden
 *
 * Returns the RGBA string representation of the color based on the `hue` and
 * assuming the `value`, `saturation`, and `alpha` have a value of `1`.
 */
exports.getColorFromHue = function (hue) {
    return exports.getColorFromHSV({ h: hue, s: 1, v: 1, a: 1 });
};
/**
 * @hidden
 *
 * Returns the RGBA string representation of the color.
 */
exports.getColorFromRGBA = function (rgba) {
    var red = misc_1.fitIntoBounds(rgba.r, 0, 255);
    var green = misc_1.fitIntoBounds(rgba.g, 0, 255);
    var blue = misc_1.fitIntoBounds(rgba.b, 0, 255);
    var alpha = misc_1.fitIntoBounds(rgba.a, 0, 1);
    return kendo_drawing_1.Color.fromBytes(red, green, blue, alpha).toCssRgba();
};
/**
 * @hidden
 *
 * Returns the RGB object representation of the color based on the background color.
 */
exports.getRGBFromRGBA = function (foregroundColor, backgroundColor) {
    var r1 = misc_1.fitIntoBounds(foregroundColor.r, 0, 255);
    var g1 = misc_1.fitIntoBounds(foregroundColor.g, 0, 255);
    var b1 = misc_1.fitIntoBounds(foregroundColor.b, 0, 255);
    var a1 = misc_1.fitIntoBounds(foregroundColor.a, 0, 1);
    var r2 = misc_1.fitIntoBounds(backgroundColor.r, 0, 255);
    var g2 = misc_1.fitIntoBounds(backgroundColor.g, 0, 255);
    var b2 = misc_1.fitIntoBounds(backgroundColor.b, 0, 255);
    return {
        r: Math.round(((1 - a1) * r2) + (a1 * r1)),
        g: Math.round(((1 - a1) * g2) + (a1 * g1)),
        b: Math.round(((1 - a1) * b2) + (a1 * b1))
    };
};
/**
 * @hidden
 *
 * Returns the relative luminance.
 */
exports.getLuminance = function (rgb) {
    var a = [rgb.r, rgb.g, rgb.b].map(function (v) {
        v /= 255;
        return v <= 0.03928
            ? v / 12.92
            : Math.pow((v + 0.055) / 1.055, 2.4);
    });
    return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;
};
/**
 * @hidden
 *
 * Returns the color contrast.
 */
exports.getContrast = function (luminance1, luminance2) {
    var brightest = Math.max(luminance1, luminance2);
    var darkest = Math.min(luminance1, luminance2);
    return (brightest + 0.05)
        / (darkest + 0.05);
};
/**
 * @hidden
 *
 * Returns the color contrast from two RGBA colors.
 */
exports.getContrastFromTwoRGBAs = function (a, b) {
    return exports.getContrast(exports.getLuminance(exports.getRGBFromRGBA(a, b)), exports.getLuminance(exports.getRGBFromRGBA(b, { r: 0, g: 0, b: 0, a: 1 })));
};
//# sourceMappingURL=color-parser.js.map